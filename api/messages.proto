syntax = "proto3";
package api;

service Chat {
  rpc SendMessage(Message) returns (MessageResp) {}
  rpc MessagesWith(Friend) returns (MessageList) {}
  rpc SendMessageToRoom(Message) returns (MessageResp) {}
  rpc RoomMessages(Room) returns (MessageList) {}
  rpc Messages(Empty) returns (stream Message) {}
}

service Friends {
  rpc All(FriendsListReq) returns (FriendsList) {}
  rpc Add(Friend) returns (FriendAddResp) {}
  rpc Remove(Friend) returns (FriendRemoveResp) {}
  rpc Requests(Empty) returns (FriendRequests) {}
  rpc Status(Empty) returns (stream FriendStatus) {}
  rpc SetStatus(StatusUpdate) returns (Empty) {}
}

service Auth {
  rpc Login(LoginRequest) returns (LoginResponse) {}
  rpc Register(RegisterRequest) returns (RegisterResponse) {}
}

message Empty {}

message LoginRequest {
  string Username = 1;
  string Password = 2;
}

// Token on login response needs to be set in metadata on the context for grpc
// calls in order to use chat service the token should be sent using key token
message LoginResponse { string Token = 1; }

message Message {
  string Data = 1;
  string From = 2;
  string To = 3;
}

message MessageList { repeated Message Messages = 1; }

message Room {
  string ID = 1; 
  string Name = 2;
}

message MessageResp { string Data = 1; }

message RegisterRequest {
  string Username = 1;
  string Password = 2;
  string FirstName = 3;
  string LastName = 4;
  string Email = 5;
}

message RegisterResponse {}

message FriendsListReq {}

message FriendsList { repeated Friend Friends = 1; }

message Friend {
  string Username = 1;
  string Email = 2;
  string FirstName = 3;
  string LastName = 4;
  string Status = 5;
  bool Online = 6;
}

message FriendAddResp {}
message FriendRemoveResp {}

message FriendRequests { repeated Friend Friends = 1; }

message FriendStatus {
  string Username = 1;
  string Status = 2;
  bool Online = 3;
}

message StatusUpdate {
  string Status = 1;
  bool Online = 2;
}
